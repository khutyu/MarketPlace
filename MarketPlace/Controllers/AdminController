using MarketPlace.Models;
using MarketPlace.Models.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

namespace MarketPlace.Controllers
{
    [Authorize(Roles = "Administrator")] // Only admins can access this controller
    public class AdminController : Controller
    {
        private readonly UserManager<User> _userManager;
        private readonly SignInManager<User> _signInManager;

        public AdminController(UserManager<User> userManager, SignInManager<User> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        [HttpGet]
        public IActionResult Dashboard()
        {
            return View(new AdminDashboardViewModel({
                totalUsers = _userManager.Users.Count(),
                totalProducts = 100,
                totalCategories = 20,
            }));
        }
        //Methods to delete a users account
        [HttpGet]
        public IActionResult DeleteUser(int id)
        {
            return View(user = _userManager.FindByIdAsync(id));
        }
        [HttpPost]
        public async Task<IActionResult> DeleteUser(string id)
        {
            try
            {
                if (string.IsNullOrEmpty(user.Id))
                {
                    return NotFound();
                }
                else
                {
                    var userToDelete = await _userManager.FindByIdAsync(id);
                }
                if (userToDelete == null)
                {
                    return NotFound();
                }
                else
                {
                    var result = await _userManager.DeleteAsync(userToDelete);
                    if (result.Succeeded)
                    {
                        return RedirectToAction("Dashboard");
                    }
                    else
                    {
                        return BadRequest(result.Errors);
                    }
                }

            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
    }
}