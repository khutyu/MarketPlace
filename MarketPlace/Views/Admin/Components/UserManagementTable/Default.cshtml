@model IEnumerable<MarketPlace.Shared.Models.User>
<!-- Table of Users -->
<div class="table-responsive">
    <table class="table table-striped table-hover align-middle">
        <thead class="table-dark">
            <tr>
                <th scope="col">User Name</th>
                <th scope="col">Email</th>
                <th scope="col">Roles</th>
                <th scope="col" class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>
                        @* @{
                            var roles = await UserManager.GetRolesAsync(user);
                        } *@
                        @* @string.Join(", ", roles) *@
                    </td>
                    <td class="text-center">
                        <div class="btn-group" role="group">
                            <!-- Suspend Button -->
                            <form asp-controller="Admin" asp-action="ChangeAccountStatus" asp-route-id="@user.Id"
                                method="post" class="d-inline">
                                @if(user.IsSuspended)
                                {
                                    <button type="submit" class="btn btn-sm btn-outline-success"
                                        onclick="return confirm('Are you sure you want to unsuspend this user?');">
                                        <i class="fas fa-check"></i> Activate
                                    </button>
                                }
                                else{
                                    <button type="submit" class="btn btn-sm btn-outline-warning"
                                    onclick="return confirm('Are you sure you want to suspend this user?');">
                                    <i class="fas fa-ban"></i> Suspend
                                </button>
                                }
                            </form>
                            <!-- Delete Button -->
                            <button type="button" class="btn btn-sm btn-outline-danger" data-bs-toggle="modal"
                                data-bs-target="#deleteModal" data-user-id="@user.Id" data-user-name="@user.UserName">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                             @* Details Button *@
                            <button type="button" class="btn btn-sm btn-outline-primary"
                                    data-bs-toggle="modal" data-bs-target="#detailsModal"
                                    data-user-id="@user.Id">
                                <i class="fas fa-info-circle"></i> Details
                            </button>
                            
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@* Delete Confirmation Modal *@
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="DeleteUserConfirmed" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title text-danger" id="deleteModalLabel">Delete User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="UserId" name="Id" />
                    <p>Are you sure you want to delete user <strong id="UserName"></strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete User</button>
                </div>
            </form>
        </div>
    </div>
</div>

@* User Details Modal *@
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
<div class="modal-dialog modal-lg">
    <div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title" id="detailsModalLabel">User Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        @* User details will be loaded here *@
    </div>
    </div>
</div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var deleteModal = document.getElementById('deleteModal');
            if (deleteModal) {
                deleteModal.addEventListener('show.bs.modal', function (event) {
                    var button = event.relatedTarget; // Button that triggered the modal
                    if (!button) {
                        console.error("No triggering button found.");
                        return;
                    }
                    var userId = button.getAttribute('data-user-id');
                    var userName = button.getAttribute('data-user-name');

                    console.log("User ID passed to modal:", userId);
                    console.log("User Name passed to modal:", userName);

                    var userIdInput = deleteModal.querySelector('#UserId');
                    var userNameStrong = deleteModal.querySelector('#UserName');

                    if (userIdInput && userNameStrong) {
                        userIdInput.value = userId;
                        userNameStrong.textContent = userName;
                    } else {
                        console.error("Modal input fields not found.");
                    }
                });
            } else {
                console.error("Delete modal not found in DOM.");
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var detailsModal = document.getElementById('detailsModal');
            if (detailsModal) {
                detailsModal.addEventListener('show.bs.modal', function (event) {
                    var button = event.relatedTarget;
                    var userId = button.getAttribute('data-user-id');
                    var modalBody = detailsModal.querySelector('.modal-body');

                    // Clear previous content and show loading indicator
                    modalBody.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div></div>';

                    // Fetch user details via AJAX
                    fetch('@Url.Action("GetUserDetailsPartial", "Admin")?id=' + encodeURIComponent(userId))
                        .then(function (response) {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.text();
                        })
                        .then(function (data) {
                            modalBody.innerHTML = data;
                        })
                        .catch(function (error) {
                            console.error('Error fetching user details:', error);
                            modalBody.innerHTML = '<p class="text-danger">Error loading user details.</p>';
                        });
                });
            }
        });
    </script> 
}