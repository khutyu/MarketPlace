@model MarketPlace.Models.ProfileViewModel
@using System
@using System.Security.Claims
@using Microsoft.IdentityModel.Tokens
<style>
    .profile-picture-container {
        position: relative;
        cursor: pointer;
    }

    .profile-picture-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .profile-picture-container:hover .profile-picture-overlay {
        opacity: 1;
    }

    .camera-icon {
        color: white;
        font-size: 2rem;
    }

    .banner-container {
        position: relative;
        cursor: pointer;
    }

    .banner-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .banner-container:hover .banner-overlay {
        opacity: 1;
    }

    .banner-camera-icon {
        color: white;
        font-size: 3rem;
    }

    .fw-medium {
        font-weight: 500;
    }
    .detail-group {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
    }
    
    .pill {
        border-radius: 50px;
        padding: 0.5rem 1rem;
    }
        .detail-group {
        background-color: #f8f9fa;
        padding: 1.25rem;
        border-radius: 0.75rem;
        height: 100%;
    }

    .detail-group label {
        margin-bottom: 0.75rem;
        font-weight: 500;
    }

    .detail-group i {
        color: #003D32;
    }
</style>

@await Html.PartialAsync("_Alerts")

<!-- Header Section -->
<div class="position-relative">
    <div class="custom-container">
        <div class="banner-container">
            <img src="@Url.Content(Model.user.ProfileBannerUrl ?? "~/images/main-building-spotlight.jpg")" 
                alt="Profile Banner" 
                class="w-100 rounded"
                style="height: 300px; object-fit: cover;">
            <div class="banner-overlay rounded">
                <i class="bi bi-camera-fill banner-camera-icon"></i>
            </div>
        </div>
    </div>
    
    <div class="position-absolute d-flex align-items-center p-3  pb-4 w-100 " 
        style="top: 15rem; left: 0; margin-top: 2rem;">
        <div class="profile-picture-container ms-5">
            <img src="@Url.Content(Model.user.ProfilePictureUrl ?? "~/images/profile-default.webp")" 
                alt="Profile picture" 
                class="rounded"
                style="width: 7rem; height: 7rem; object-fit: cover;">
            <div class="profile-picture-overlay rounded">
                <i class="bi bi-camera-fill camera-icon"></i>
            </div>
        </div>
        <div class="ms-3">
            <h1 class="fs-4 fw-bold mb-0">@Model.user.FirstName @Model.user.LastName</h1>
            @if (Model.user != null)
            {
                double rating = Model.user.Rating ;
                int reviewCount = Model.user.Reviews.Count();

                <div class="d-flex align-items-center mb-1">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Floor(rating))
                        {
                            <i class="bi bi-star-fill text-warning"></i>
                        }
                        else if (i - rating <= 0.5)
                        {
                            <i class="bi bi-star-half text-warning"></i>
                        }
                        else
                        {
                            <i class="bi bi-star text-warning"></i>
                        }
                    }
                    <span class="ms-2 text-muted">(@reviewCount Reviews)</span>
                </div>
            }
            else
            {
                <p class="text-muted">User data is not available.</p>
            }

            <p class="text-muted mb-0">@(Model?.user?.Products?.Count() ?? 0) Listings</p>
        </div>
        <div class="ms-auto me-5" data-button-container>
            <button class="btn btn-warning pill">Chat</button>
        </div>
    </div>

    <div class="p-4 border-bottom mb-3 ms-3" style="margin-top:5.5rem ;" data-button-container>
        <a class="btn btn-warning active pill" asp-action="Profile" asp-controller="User">Profile</a>
        <a class="btn btn-warning me-2 pill" >Details</a>
    </div>
</div>
<!--Main content-->
<div class="container-fluid ms-5">
    <div class="row align-items-start">
        <!-- Left Section -->
        <div class="col-md-4 me-5 shadow p-3 rounded">
            <section>
                <h2 class="fs-5 fw-bold mb-3">Profile</h2>
                <div class="d-flex flex-column gap-2" data-button-container>
                    <a class="btn btn-warning w-100 pill active " data-section="reviews">Reviews</a>
                    <a class="btn btn-warning pill w-100" data-section="details">Account Information</a>
                    <a class="btn btn-warning w-100  pill"  asp-action="ManageListings" asp-controller="ProductManager">Manage Listings</a>
                    <a class="btn btn-warning w-100 pill">My Listings</a>
                </div>
            </section>
        </div>
        
        <!-- Right Section -->
<div class="col-md-7">
    <!-- Reviews Section -->
    <div id="reviewsSection" class="card border-0 shadow-sm">
        @await Component.InvokeAsync("ReviewSummary",Model.user.Reviews) 
    </div>

    <!-- Account Details Section -->
    <div id="detailsSection" data-section="details" class="card border-0 shadow-sm d-none">
        <div class="card border-0 shadow-sm p-4">
    <div class="row g-4">
        <!-- Personal Information -->
        <div class="col-md-6">
            <div class="detail-group">
                <label class="form-label text-muted small">
                    <i class="bi bi-person me-2"></i>First Name
                </label>
                <p class="mb-0 fw-medium">@Model.user.FirstName</p>
            </div>
        </div>
        <div class="col-md-6">
            <div class="detail-group">
                <label class="form-label text-muted small">
                    <i class="bi bi-person me-2"></i>Last Name
                </label>
                <p class="mb-0 fw-medium">@Model.user.LastName</p>
            </div>
        </div>

        <!-- Contact Information -->
        <div class="col-md-6">
            <div class="detail-group">
                <label class="form-label text-muted small">
                    <i class="bi bi-envelope me-2"></i>Email
                </label>
                <p class="mb-0 fw-medium">@Model.user.Email</p>
            </div>
        </div>
        <div class="col-md-6">
            <div class    ="detail-group">
                <label class="form-label text-muted small">
                    <i class="bi bi-telephone me-2"></i>Phone Number
                </label>
                <p class="mb-0 fw-medium">@Model.user.PhoneNumber</p>
            </div>
        </div>

        <!-- Full Address -->
        <div class="col-12">
            <div class="detail-group">
                <label class="form-label text-muted small">
                    <i class="bi bi-geo-alt me-2"></i>Address
                </label>
                <div class="address-details">
                    <p class="mb-1 fw-medium">@Model.user.Address.AddressLine1</p>
                    @if (!string.IsNullOrEmpty(Model.user.Address.AddressLine2))
                    {
                        <p class="mb-1 fw-medium">@Model.user.Address.AddressLine2</p>
                    }
                    <p class="mb-0 fw-medium">
                        @Model.user.Address.City, @Model.user.Address.State @Model.user.Address.PostalCode
                    </p>
                    <p class="mb-0 fw-medium">@Model.user.Address.Country</p>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
</div>
</div>

</div>
<!-- Recent Listings Section -->
<div class="shadow rounded border-0 me-4 mt-3" >
    <div class="row d-flex align-items-start">
    <div class="card border-0 shadow-sm">
        <div class="card-body p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fs-5 fw-bold mb-0">Recent Listings</h2>
                <a href="#" class="btn btn-warning btn-sm pill">View All</a>
            </div>
            
            @if(Model.user.Products != null){
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-3">
                @foreach (var i in Enumerable.Range(1,4)) 
                {
                    <div class="col">
                        <div class="card h-100 border-0 shadow-sm">
                            <img src="~/images/Laptop-catergory.jpg" 
                                class="card-img-top"
                                style="height: 160px; object-fit: cover;"
                                alt="Listing image">
                            <div class="card-body p-3">
                                <h6 class="card-title mb-1">Product Title</h6>
                                <p class="card-text text-muted mb-2">$299.99</p>
                                <small class="text-muted">Posted 2 days ago</small>
                            </div>
                        </div>
                    </div>
                }
                </div>
            }
        else{
            <div class="text-center py-5">
                <i class="bi bi-box fs-1 text-muted mb-3"></i>
                <h3 class="fs-5 fw-bold text-muted">No Listings yet</h3>
                <p class="text-muted mb-4">Check back later for new Listings</p>
            </div>
        }
        </div>
    </div>
    </div>
</div>

<!-- Profile Picture Upload Modal -->
<div class="modal fade" data-bs-backdrop="static" id="profilePictureModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0">
            <div class="modal-header border-0">
                <h5 class="modal-title">Update Profile Picture</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <div class="upload-preview mb-3">
                    <img id="profilePreview" src="#" class="rounded-circle d-none" 
                        style="width: 150px; height: 150px; object-fit: cover;">
                </div>
                <div class="upload-zone p-4 border-2 border-dashed rounded">
                    <i class="bi bi-cloud-upload fs-2 text-muted"></i>
                    <p class="mb-0">Drop your image here or click to browse</p>
                    <!-- File Upload Form -->
                    <form id="profilePictureForm" asp-action="UploadProfilePicture" asp-controller="User" method="post" 
                        enctype="multipart/form-data">
                        <input type="file" asp-for="ProfilePicture" id="profilePictureInput" name="ProfilePicture" 
                            accept="image/*" class="d-none">
                        <label for="profilePictureInput" class="btn btn-outline-primary mt-3">
                            Select File
                        </label>
                    </form>
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="profilePictureForm" class="btn btn-warning">Save</button>
            </div>
        </div>
    </div>
</div>


<!-- Banner Upload Modal -->
<div class="modal fade" id="bannerModal" data-bs-backdrop="static" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content border-0">
            <div class="modal-header border-0">
                <h5 class="modal-title">Update Banner Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="profileBannerForm" asp-action="UploadProfileBanner" asp-controller="User" 
                method="post" enctype="multipart/form-data">
                <div class="modal-body text-center">
                    <div class="upload-preview mb-3">
                        <img id="bannerPreview" src="#" class="d-none w-100 rounded" 
                            style="max-height: 200px; object-fit: cover;">
                    </div>
                    <div class="upload-zone p-4 border-2 border-dashed rounded">
                        <i class="bi bi-cloud-upload fs-2 text-muted"></i>
                        <p class="mb-0">Drop your image here or click to browse</p>
                        <input type="file" asp-for="ProfileBanner" id="profileBannerInput" 
                            class="d-none" accept="image/*">
                        <label for="profileBannerInput" class="btn btn-outline-primary mt-3">
                            Select File
                        </label>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const reviewsBtn = document.querySelector('[data-section="reviews"]');
            const detailsBtn = document.querySelector('[data-section="details"]');
            const reviewsSection = document.getElementById('reviewsSection');
            const detailsSection = document.getElementById('detailsSection');

            function toggleSections(showSection, hideSection, activeBtn, inactiveBtn) {
                showSection.classList.remove('d-none');
                hideSection.classList.add('d-none');
                activeBtn.classList.add('active');
                inactiveBtn.classList.remove('active');
            }

            reviewsBtn.addEventListener('click', () => {
                console.log("reviews button clicked");
                console.log(reviewsSection)
                toggleSections(reviewsSection, detailsSection, reviewsBtn, detailsBtn);
            });

            detailsBtn.addEventListener('click', () => {
                toggleSections(detailsSection, reviewsSection, detailsBtn, reviewsBtn);
                console.log("Details toggleSections clicked")
                console.log(detailsSection)
            });
        });
    </script>
    <script>
        const saveButtons = document.getElementById('saveButtons');
        const saveButton = document.querySelector('button[type="submit"]');

        function validateForm() {
            let isValid = true;
            inputs.forEach(input => {
                if(input.value.length < 1 && input.hasAttribute('required')) {
                    isValid = false;
                }
            });
            return isValid;
        }

        function updateSaveButtonState() {
            saveButton.disabled = !validateForm();
            saveButton.classList.toggle('btn-secondary', !validateForm());
            saveButton.classList.toggle('btn-warning', validateForm());
        }


        inputs.forEach(input => {
            input.addEventListener('input', updateSaveButtonState);
        });

        // Set initial state
        updateSaveButtonState();
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Profile Picture Upload
            const profilePictureOverlay = document.querySelector('.profile-picture-overlay');
            const profilePictureModal = document.getElementById('profilePictureModal');
            const profilePictureInput = document.getElementById('profilePictureInput');
            const profilePreview = document.getElementById('profilePreview');

            if (profilePictureOverlay && profilePictureModal) {
                profilePictureOverlay.addEventListener('click', () => {
                    const modal = new bootstrap.Modal(profilePictureModal);
                    modal.show();
                });
            }

            // Banner Upload
            const bannerOverlay = document.querySelector('.banner-overlay');
            const bannerModal = document.getElementById('bannerModal');
            const bannerInput = document.getElementById('bannerInput');
            const bannerPreview = document.getElementById('bannerPreview');

            if (bannerOverlay && bannerModal) {
                bannerOverlay.addEventListener('click', () => {
                    const modal = new bootstrap.Modal(bannerModal);
                    modal.show();
                });
            }

            // Handle Preview Function
            const handlePreview = (fileInputId, previewId) => {
                const fileInput = document.getElementById(fileInputId);
                const preview = document.getElementById(previewId);

                if (!fileInput || !preview) return;

                fileInput.addEventListener('change', function() {
                    const file = this.files[0];

                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            preview.src = e.target.result;
                            preview.classList.remove('d-none');
                        }
                        reader.readAsDataURL(file);
                    }
                });
            }

            // Initialize preview handlers
            handlePreview('profilePictureInput', 'profilePreview');
            handlePreview('bannerInput', 'bannerPreview');
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // File input configuration
            const FILE_TYPES = ['image/jpeg', 'image/png', 'image/gif'];
            const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

            function handleFileSelect(input, preview, form) {
                const file = input.files[0];
                
                // Validate file type
                if (!FILE_TYPES.includes(file.type)) {
                    showError('Please select a valid image file (JPEG, PNG, or GIF)');
                    input.value = '';
                    return;
                }

                // Validate file size
                if (file.size > MAX_FILE_SIZE) {
                    showError('File size should not exceed 5MB');
                    input.value = '';
                    return;
                }

                // Show preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.classList.remove('d-none');
                }
                reader.readAsDataURL(file);

                // Enable submit button
                form.querySelector('button[type="submit"]').disabled = false;
            }

            function showError(message) {
                const errorAlert = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>`;
                document.querySelector('.modal-body').insertAdjacentHTML('afterbegin', errorAlert);
            }

    // Profile Picture Upload
    const profilePictureInput = document.getElementById('profilePictureInput');
    const profilePreview = document.getElementById('profilePreview');
    const profileForm = document.getElementById('profilePictureForm');

    if (profilePictureInput) {
        profilePictureInput.addEventListener('change', () => 
            handleFileSelect(profilePictureInput, profilePreview, profileForm));
    }

    // Banner Upload
    const bannerInput = document.getElementById('profileBannerInput');
    const bannerPreview = document.getElementById('bannerPreview');
    const bannerForm = document.getElementById('profileBannerForm');

    if (bannerInput) {
        bannerInput.addEventListener('change', () => 
            handleFileSelect(bannerInput, bannerPreview, bannerForm));
    }

    // Form submission handling
    [profileForm, bannerForm].forEach(form => {
        if (form) {
            form.addEventListener('submit', function(e) {
                const submitButton = this.querySelector('button[type="submit"]');
                submitButton.disabled = true;
                submitButton.innerHTML = `
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    Uploading...`;
            });
        }
    });
});
</script>
}